# Meta Development Context (Podman)

This file documents the development environment, standards, and update rules for using Podman with the Server Manager project. Keep this file up to date as the project evolves.

---

## Development Environment

- **Podman:** Podman can be used as a drop-in replacement for Docker. All development and testing should work with Podman as well as Docker.
- **PHP:** 8.4+
- **Laravel:** 12.x
- **Livewire:** 3.5+
- **Node:** Use the version specified in the Dockerfile (update as needed for compatibility with Tailwind/daisyUI).
- **Redis:** Redis 7 is included as a service in the Compose environment for caching, queues, and session management.

## Services

- **app:** PHP-FPM, Composer, Node, NPM (Laravel application)
- **nginx:** Serves the application via HTTP
- **redis:** In-memory data store for cache, queues, and sessions

## Podman Usage Notes

- Podman Compose is compatible with Docker Compose YAML files. Use `podman-compose` in place of `docker compose` for all commands.
- Ensure Podman is installed and configured to run rootless containers if desired.
- Networking and volume mounts should work identically, but test for any platform-specific issues.
- If SELinux is enabled, you may need to add `:z` or `:Z` to volume mounts for proper permissions.

## Standards

- Follow PSR-12 and Laravel best practices.
- Use strict typing and SOLID principles.
- All code must be covered by PestPHP tests.
- All code must pass PHPStan (level max).
- Use Livewire and Blade components for UI.
- Use Tailwind CSS and daisyUI for styling.

## Update Procedures

- When updating PHP, Laravel, Livewire, or other core dependencies, update the Dockerfile and docker-compose.yml accordingly.
- Update the README.md, docker.mdc, and this podman.mdc file to reflect any changes in the development environment or standards.
- Ensure all tests pass and PHPStan reports no errors before merging changes.
- Test all changes with both Docker and Podman Compose.

## Testing

- Run PestPHP tests and PHPStan in the Podman container before pushing or merging.
- Use GitHub Actions for CI to enforce code quality and test coverage.

## Manual Testing

- Use the Podman Compose environment to manually test the application in a browser at http://localhost:8000.

---

_Last updated: 2024-06-09_
description:
globs:
alwaysApply: false
---
